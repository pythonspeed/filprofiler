---
name: CI

on:
  push:
    branches: ["master"]
    tags:
      - "*"
  pull_request:
    branches: ["master"]


env:
  # Should speed up build. See
  # https://matklad.github.io/2021/09/04/fast-rust-builds.html
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10


jobs:
  tests:
    name: "${{ matrix.os }}: Python ${{ matrix.python-version }}"
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: ["ubuntu-20.04", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    env:
      PYTHONFAULTHANDLER: "true"

    steps:
      - uses: "actions/checkout@v3"
        with:
          # We need tags to get the correct code version:
          fetch-depth: 0
      - uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: "actions-rs/toolchain@v1"
        with:
          toolchain: stable
      - name: "Install rust for arm64"
        if: startsWith(matrix.os, 'mac') && (matrix.python-version == '3.9')
        run: |
          rustup target add aarch64-apple-darwin
      # - uses: Swatinem/rust-cache@v1
      #   with:
      #     key: "${{ matrix.os }}-${{ matrix.python-version }}"
      - name: "Install gfortran"
        if: contains(matrix.os, 'ubuntu')
        run: |
            sudo apt-get update
            sudo apt-get install -y gfortran
      - name: Install gfortran 2
        if: contains(matrix.os, 'macos')
        run: |
          set -euo pipefail
          brew install gcc@9 || true
          gfortran --version || sudo ln -s /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
          gfortran --version
      - name: "Install dependencies and code"
        run: |
          set -euo pipefail
          make venv
          . venv/bin/activate
          python -m sysconfig
          make
          pip install -e .[dev]
      - name: "Run tests"
        run: |
          set -euo pipefail
          . venv/bin/activate
          make test
      - name: "Build macOS wheels"
        if: startsWith(matrix.os, 'mac') && (matrix.python-version == '3.9')
        uses: pypa/cibuildwheel@v2.11.3
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_SKIP: "cp37-macosx_arm64 cp36* pp*"
          CIBW_BEFORE_BUILD: "touch filpreload/src/_filpreload.c"  # force rebuild of Python code with new interpreter
          CIBW_TEST_COMMAND: python -m filprofiler run {project}/benchmarks/pystone.py
        with:
          output-dir: dist
      - name: "Build manylinux wheels"
        if: startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')
        run: |
            set -euo pipefail
            . venv/bin/activate
            make manylinux-wheel
            # Test wheel
            deactivate
            python3.8 -m venv venv2
            . venv2/bin/activate
            pip install -r requirements-dev.txt
            pip install dist/*-cp38-*manylinux*.whl
            mv filprofiler filprofiler.disabled
            make test-python-no-deps
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}-wheel"
          path: dist/*.whl
      # - name: Publish distribution ðŸ“¦ to Test PyPI
      #   if: (startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')) || startsWith(matrix.os, 'mac')
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      #   run: |
      #       set -euo pipefail
      #       . venv/bin/activate
      #       twine check dist/*.whl
      #       twine upload --repository testpypi dist/*.whl
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.event.ref, 'refs/tags') && ((startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')) || (startsWith(matrix.os, 'mac') && (matrix.python-version == '3.9')))
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
            set -euo pipefail
            . venv/bin/activate
            twine check dist/*.whl
            twine upload --repository pypi dist/*.whl
  docs:
    name: "Documentation check and publish"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Run mdbook"
        run: |
          set -euo pipefail
          cd docs
          ./build.sh
      - name: Publish
        if: startsWith(github.event.ref, 'refs/tags')
        env:
          PUBLISH_DOCS_HOOK: ${{ secrets.PUBLISH_DOCS_HOOK }}
        run: |
          set -euo pipefail
          curl -X POST -d '{}' "$PUBLISH_DOCS_HOOK"

  arm-wheels:
    name: "Wheels for ARM64"
    runs-on: "ubuntu-latest"
    if: startsWith(github.event.ref, 'refs/tags')
    env:
      CIBW_ARCHS_LINUX: aarch64
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
      CIBW_BEFORE_BUILD: "touch filpreload/src/_filpreload.c"  # force rebuild of Python code with new interpreter
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* cp311-* pp* *-musllinux*"
      CIBW_TEST_COMMAND: python -m filprofiler run {project}/benchmarks/pystone.py
    steps:
      - uses: actions/checkout@v3
        with:
          # We need tags to get the correct code version:
          fetch-depth: 0
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        with:
          output-dir: dist
      - uses: actions/upload-artifact@v2
        with:
          name: "arm64-wheel"
          path: dist/*.whl
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.event.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
            set -euo pipefail
            pip install twine
            twine check dist/*.whl
            twine upload --repository pypi dist/filprofiler*.whl
